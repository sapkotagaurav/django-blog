from django.http import HttpResponse
from django.template import loader
from django.core.mail import send_mail, BadHeaderError
from chronicles.models import Category, Post
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from django.core.mail import EmailMultiAlternatives




posts = Post.objects.filter(status=1).order_by('created_on')
email_body = '''<p><strong>RE: {0}</strong></p><p>Your Message:</p><p>&nbsp;</p><div><code>{1}</code></div><br><br>Has been sent to Gaurab Sapkota.<br>You can reply this email.<br><br><kbd>This message is automatically generated by my site.</kbd>'''
years = []

for a in posts:
    years.append(a.created_on.year)
res = []
for year in years:
    if year not in res:
        res.append(year)


years = res


def index(request):
    template = loader.get_template('home.html')
    context = {'a': 1}
    return HttpResponse(template.render(context, request))


def contact(request):
    template = loader.get_template('contact.html')
    if request.method == "POST":
        name = request.POST.get('name')
        email = request.POST.get('email')
        message = request.POST.get('message')
        message2 = EmailMultiAlternatives("RE:"+name, email_body.format(name,message), 'iamgvs906@gmail.com', [email])
        message2.content_subtype = "html"
      #  message2.attach_alternative(email_body.format(name,message),'html')
        
        try:
            message2.send()
            send_mail("Contact from your site","Sender:{0}\n\n name{1}\n\n message:\n{2}".format(email,name,message),email,['iamgvs906@gmail.com'])
            context = {'p': 1, 'posts': posts,
                   'cats': Category.objects.all(), 'years': years}
            return HttpResponse(template.render(context, request))
        except BadHeaderError:
            return HttpResponse('Error Found')
        

    else:
        context = {'p': 0, 'posts': posts,
                   'cats': Category.objects.all(), 'years': years}
        return HttpResponse(template.render(context, request))

    


def error404(request, exception):
    template = loader.get_template('404.html')
    context = {'status': 404, 'posts': posts,
               'cats': Category.objects.all(), 'years': years}
    return HttpResponse(template.render(context, request))
